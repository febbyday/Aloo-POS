generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id               String            @id @default(cuid())
  name             String
  description      String?
  shortDescription String?
  sku              String            @unique
  barcode          String?           @unique
  retailPrice      Decimal           @db.Decimal(10, 2)
  costPrice        Decimal?          @db.Decimal(10, 2)
  salePrice        Decimal?          @db.Decimal(10, 2)
  status           ProductStatus     @default(ACTIVE)
  productType      String            @default("simple")
  brand            String?
  stock            Int               @default(0)
  reorderPoint     Int?              @default(10)
  categoryId       String?
  supplierId       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  OrderItem        OrderItem[]
  Category         Category?         @relation(fields: [categoryId], references: [id])
  Supplier         Supplier?         @relation(fields: [supplierId], references: [id])
  ProductLocation  ProductLocation[]
}

model Order {
  id                  String               @id @default(cuid())
  orderNumber         String               @unique
  status              OrderStatus          @default(PENDING)
  total               Decimal              @db.Decimal(10, 2)
  subtotal            Decimal              @db.Decimal(10, 2)
  tax                 Decimal              @default(0) @db.Decimal(10, 2)
  discount            Decimal              @default(0) @db.Decimal(10, 2)
  notes               String?
  paymentMethod       String?
  paymentStatus       PaymentStatus        @default(PENDING)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  customerId          String?
  shopId              String?
  customer            Customer?            @relation(fields: [customerId], references: [id])
  shop                Shop?                @relation(fields: [shopId], references: [id])
  items               OrderItem[]
  loyaltyTransactions LoyaltyTransaction[]
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  discount  Decimal  @default(0) @db.Decimal(10, 2)
  tax       Decimal  @default(0) @db.Decimal(10, 2)
  orderId   String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

model Category {
  id             String     @id
  name           String     @unique
  description    String?
  parentId       String?
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime
  Category       Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  other_Category Category[] @relation("CategoryToCategory")
  Product        Product[]
}

model Customer {
  id              String               @id @default(cuid())
  firstName       String
  lastName        String
  email           String               @unique
  phone           String?
  status          String               @default("active")
  loyaltyPoints   Int                  @default(0)
  totalSpent      Decimal              @default(0) @db.Decimal(10, 2)
  dateOfBirth     DateTime?
  notes           String?
  tags            String[]
  totalOrders     Int                  @default(0)
  isActive        Boolean              @default(true)
  lastPurchase    DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  membershipLevel String               @default("bronze")
  addresses       Address[]
  orders          Order[]
  repairs         Repair[]
  transactions    LoyaltyTransaction[]
  groups          CustomerGroup[]      @relation("CustomerToCustomerGroup")
}

model Address {
  id         String   @id @default(cuid())
  street     String
  city       String
  state      String?
  postalCode String?
  country    String   @default("USA")
  isDefault  Boolean  @default(false)
  type       String   @default("shipping")
  customerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model CustomerGroup {
  id            String     @id @default(cuid())
  name          String     @unique
  description   String?
  discountType  String     @default("percentage")
  discountValue Decimal    @default(0) @db.Decimal(10, 2)
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  customers     Customer[] @relation("CustomerToCustomerGroup")
}

model EmploymentStatus {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String
  isActive    Boolean  @default(true)
  staffCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  benefits    String[]
  Staff       Staff[]
}

model EmploymentType {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String
  benefits    String[]
  staffCount  Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Staff       Staff[]
}

model ProductLocation {
  id        String   @id @default(cuid())
  stock     Int      @default(0)
  minStock  Int      @default(0)
  maxStock  Int      @default(100)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([productId, shopId])
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       String?
  isActive        Boolean          @default(true)
  isSystemRole    Boolean          @default(false)
  permissions     Json             @default("{}")
  staffCount      Int              @default(0)
  updatedBy       String?
  auditLogs       RoleAuditLog[]
  rolePermissions RolePermission[]
  staff           Staff[]
}

model RolePermission {
  id          String   @id @default(cuid())
  roleId      String
  resource    String
  action      String
  granted     Boolean  @default(false)
  constraints Json?    @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, resource, action])
  @@index([roleId])
  @@index([resource, action])
}

model RoleAuditLog {
  id        String   @id @default(cuid())
  roleId    String
  userId    String?
  action    String
  changes   Json
  createdAt DateTime @default(now())
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@index([roleId])
  @@index([userId])
  @@index([createdAt])
}

model RoleTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  permissions Json
  isPreset    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  @@index([createdAt])
}

model Shop {
  id                   String            @id @default(cuid())
  code                 String            @unique
  name                 String
  description          String?

  // Address as a JSON object
  address              Json

  phone                String
  email                String?
  status               ShopStatus        @default(ACTIVE)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  type                 ShopType          @default(RETAIL)
  manager              String?
  operatingHours       Json?
  lastSync             DateTime          @default(now())
  isHeadOffice         Boolean           @default(false)
  licenseNumber        String?
  logoUrl              String?
  taxId                String?
  timezone             String            @default("UTC")
  website              String?
  settings             Json?

  // Analytics fields
  salesLastMonth       Decimal?          @db.Decimal(10, 2)
  inventoryCount       Int?              @default(0)
  averageOrderValue    Decimal?          @db.Decimal(10, 2)
  topSellingCategories String[]          @default([])
  recentActivity       Json?

  // Staff related
  staffCount           Int?              @default(0)
  orders               Order[]
  productLocations     ProductLocation[]
  shifts               Shift[]
  assignments          StaffAssignment[]
  staff                Staff[]           @relation("StaffToShop")
}

model Staff {
  id                 String            @id @default(cuid())
  firstName          String
  lastName           String
  email              String            @unique
  phone              String?
  roleId             String
  status             StaffStatus       @default(ACTIVE)
  employmentTypeId   String?
  employmentStatusId String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  code               String            @unique
  repairs            Repair[]          @relation("RepairTechnician")
  shifts             Shift[]
  employmentStatus   EmploymentStatus? @relation(fields: [employmentStatusId], references: [id])
  employmentType     EmploymentType?   @relation(fields: [employmentTypeId], references: [id])
  role               Role              @relation(fields: [roleId], references: [id])
  assignments        StaffAssignment[]
  shops              Shop[]            @relation("StaffToShop")
}

model Shift {
  id        String      @id @default(cuid())
  staffId   String
  shopId    String
  startTime DateTime
  endTime   DateTime?
  status    ShiftStatus @default(ACTIVE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  shop      Shop        @relation(fields: [shopId], references: [id])
  staff     Staff       @relation(fields: [staffId], references: [id])
}

model StaffAssignment {
  id        String    @id @default(cuid())
  staffId   String
  shopId    String
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      String?
  isPrimary Boolean   @default(false)
  schedule  Json?
  shop      Shop      @relation(fields: [shopId], references: [id])
  staff     Staff     @relation(fields: [staffId], references: [id])
}

model Supplier {
  id            String       @id @default(cuid())
  name          String
  contactPerson String?
  email         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  country       String?
  notes         String?
  postalCode    String?
  taxId         String?
  code          String?      @unique
  Product       Product[]
  RepairItem    RepairItem[]
}

model Repair {
  id                   String              @id @default(cuid())
  ticketNumber         String              @unique
  customerId           String
  customerName         String
  customerPhone        String
  customerEmail        String?
  productType          LeatherProductType
  productDescription   String
  productImages        String[]
  color                String?
  serialNumber         String?
  issueType            RepairIssueType
  issueDescription     String
  additionalNotes      String?
  technicianAssignedId String
  priority             RepairPriority      @default(MEDIUM)
  status               RepairStatus        @default(PENDING)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  completedAt          DateTime?
  deliveredAt          DateTime?
  estimatedCost        Decimal             @db.Decimal(10, 2)
  actualCost           Decimal?            @db.Decimal(10, 2)
  depositAmount        Decimal             @default(0) @db.Decimal(10, 2)
  balanceDue           Decimal?            @db.Decimal(10, 2)
  warranty             Boolean             @default(false)
  notifyCustomer       Boolean             @default(true)
  notes                String?
  cancellationReason   String?
  dueDate              DateTime
  isPaid               Boolean             @default(false)
  paymentDate          DateTime?
  productBrand         String
  productModel         String
  productName          String
  payments             PaymentRecord[]
  customer             Customer            @relation(fields: [customerId], references: [id])
  technician           Staff               @relation("RepairTechnician", fields: [technicianAssignedId], references: [id])
  diagnostics          RepairDiagnostics[]
  items                RepairItem[]
  workLogs             RepairWorkLog[]
}

model RepairItem {
  id               String    @id @default(cuid())
  repairId         String
  type             String
  name             String
  description      String?
  quantity         Int
  unitPrice        Decimal   @db.Decimal(10, 2)
  supplierId       String?
  status           String
  estimatedArrival DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  repair           Repair    @relation(fields: [repairId], references: [id], onDelete: Cascade)
  supplier         Supplier? @relation(fields: [supplierId], references: [id])
}

model RepairDiagnostics {
  id                String   @id @default(cuid())
  repairId          String
  timestamp         DateTime
  technician        String
  findings          String
  recommendations   String
  estimatedCost     Decimal  @db.Decimal(10, 2)
  estimatedDuration Decimal  @db.Decimal(10, 2)
  images            String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  repair            Repair   @relation(fields: [repairId], references: [id], onDelete: Cascade)
}

model RepairWorkLog {
  id          String       @id @default(cuid())
  repairId    String
  timestamp   DateTime
  technician  String
  description String
  hoursWorked Decimal      @db.Decimal(10, 2)
  status      RepairStatus
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  repair      Repair       @relation(fields: [repairId], references: [id], onDelete: Cascade)
}

model PaymentRecord {
  id        String        @id @default(cuid())
  repairId  String
  timestamp DateTime
  amount    Decimal       @db.Decimal(10, 2)
  method    PaymentMethod
  reference String?
  notes     String?
  isDeposit Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  repair    Repair        @relation(fields: [repairId], references: [id], onDelete: Cascade)
}

model User {
  id                   String         @id @default(uuid())
  username             String         @unique
  password             String
  email                String         @unique
  firstName            String
  lastName             String
  role                 UserRole       @default(CASHIER)
  avatar               String?
  createdAt            DateTime       @default(now())
  lastLogin            DateTime?
  permissions          String[]
  auditLogs            AuditLog[]
  createdNotifications Notification[] @relation("NotificationCreator")
  notifications        Notification[] @relation("UserNotifications")
  refreshTokens        RefreshToken[]
  sessions             Session[]
}

model LoyaltyTransaction {
  id          String   @id @default(cuid())
  customerId  String
  points      Int
  type        String
  description String?
  orderId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  customer    Customer @relation(fields: [customerId], references: [id])
  order       Order?   @relation(fields: [orderId], references: [id])

  @@map("loyalty_transactions")
}

model LoyaltyTier {
  id           String   @id @default(uuid())
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  color        String   @default("#000000")
  discount     Decimal  @default(0) @db.Decimal(10, 2)
  minimumSpend Decimal  @default(0) @db.Decimal(10, 2)
  benefits     String[]

  @@map("loyalty_tiers")
}

model LoyaltyReward {
  id          String   @id @default(uuid())
  name        String
  description String
  pointsCost  Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("loyalty_rewards")
}

model LoyaltyEvent {
  id            String   @id @default(uuid())
  name          String
  description   String
  pointsAwarded Int
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("loyalty_events")
}

model LoyaltySettings {
  id                        String   @id @default(uuid())
  pointsPerDollar           Float    @default(1)
  pointValueInCents         Float    @default(1)
  minimumRedemption         Int      @default(100)
  expiryPeriodInDays        Int      @default(365)
  enableBirthdayBonus       Boolean  @default(true)
  birthdayBonusPoints       Int      @default(50)
  enableReferralBonus       Boolean  @default(true)
  referralBonusPoints       Int      @default(100)
  autoTierUpgrade           Boolean  @default(true)
  tierDowngradeEnabled      Boolean  @default(false)
  tierDowngradePeriodDays   Int      @default(365)
  spendingCalculationPeriod String   @default("LIFETIME")
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("loyalty_settings")
}

model AuditLog {
  id           String   @id @default(uuid())
  userId       String?
  action       String?
  resourceId   String?
  details      Json?
  ipAddress    String?
  userAgent    String?
  category     String
  resourceType String?
  sessionId    String?
  severity     String
  status       String
  timestamp    DateTime @default(now())
  type         String
  username     String?
  user         User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
  @@index([category])
  @@index([type])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model Session {
  id             String            @id @default(uuid())
  userId         String
  createdAt      DateTime          @default(now())
  expiresAt      DateTime
  lastActivityAt DateTime
  ipAddress      String?
  userAgent      String?
  isActive       Boolean           @default(true)
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities     SessionActivity[]

  @@index([userId])
  @@index([isActive, expiresAt])
}

model SessionActivity {
  id        String   @id @default(uuid())
  sessionId String
  activity  String
  timestamp DateTime @default(now())
  details   Json?
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([timestamp])
}

model Notification {
  id          String               @id @default(uuid())
  title       String
  message     String
  type        NotificationType     @default(SYSTEM)
  priority    NotificationPriority @default(LOW)
  isRead      Boolean              @default(false)
  isArchived  Boolean              @default(false)
  link        String?
  metadata    Json?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  readAt      DateTime?
  expiresAt   DateTime?
  userId      String
  createdById String?
  createdBy   User?                @relation("NotificationCreator", fields: [createdById], references: [id])
  user        User                 @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
  USER
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  REFUNDED
  FAILED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum StaffStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
}

enum LeatherProductType {
  SHOES
  BOOTS
  BAGS
  WALLETS
  BELTS
  JACKETS
  OTHER
}

enum RepairIssueType {
  TORN_LEATHER
  BROKEN_ZIPPER
  FADED_COLOR
  STITCHING_DAMAGE
  BROKEN_STRAP
  HARDWARE_DAMAGE
  LINING_DAMAGE
  WATER_DAMAGE
  OTHER
}

enum RepairStatus {
  PENDING
  IN_PROGRESS
  WAITING_PARTS
  READY_FOR_TESTING
  COMPLETED
  DELIVERED
  CANCELLED
}

enum RepairPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_MONEY
  BANK_TRANSFER
}

enum ShiftStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ShopStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  CLOSED
  PENDING
}

enum ShopType {
  RETAIL
  WAREHOUSE
  OUTLET
  MARKET
  ONLINE
}

enum NotificationType {
  SYSTEM
  INVENTORY
  SALES
  USER
  TASK
  SECURITY
  PAYMENT
  OTHER
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
