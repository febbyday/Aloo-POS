import { jsPDF } from 'jspdf'
import 'jspdf-autotable'
import * as XLSX from 'xlsx'

export type AlertItem = {
  id: string
  product: string
  sku: string
  currentStock: number
  minStock: number
  location: string
  severity: string
}

export type PrintOptions = {
  companyInfo: {
    name: string
    address: string
    phone: string
    email: string
    logo?: string
  }
  user: {
    name: string
    role: string
  }
}

export function printAlerts(alerts: AlertItem[], options: PrintOptions) {
  const printWindow = window.open('', '_blank')
  if (!printWindow) return

  const currentDate = new Date().toLocaleString()
  const { companyInfo, user } = options

  const tableHtml = `
    <html>
      <head>
        <title>Low Stock Alerts</title>
        <style>
          @media print {
            @page {
              size: A4;
              margin: 2cm;
            }
          }
          body { 
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
          }
          .header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #eee;
          }
          .company-name {
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0;
          }
          .company-info {
            color: #666;
            margin: 5px 0;
          }
          .report-info {
            display: flex;
            justify-content: space-between;
            margin: 20px 0;
            color: #666;
            font-size: 0.9em;
          }
          table { 
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            font-size: 0.9em;
          }
          th, td {
            border: 1px solid #ddd;
            padding: 12px 8px;
            text-align: left;
          }
          th {
            background-color: #f5f5f5;
            font-weight: bold;
          }
          .high { color: #dc2626; font-weight: bold; }
          .warning { color: #f59e0b; font-weight: bold; }
          .footer {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 2px solid #eee;
            font-size: 0.8em;
            color: #666;
            text-align: center;
          }
          .print-info {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
            font-style: italic;
          }
        </style>
      </head>
      <body>
        <div class="header">
          ${companyInfo.logo ? `<img src="${companyInfo.logo}" alt="Company Logo" style="max-height: 60px;">` : ''}
          <div class="company-name">${companyInfo.name}</div>
          <div class="company-info">${companyInfo.address}</div>
          <div class="company-info">Tel: ${companyInfo.phone} | Email: ${companyInfo.email}</div>
        </div>

        <div class="report-info">
          <div>
            <strong>Report Type:</strong> Low Stock Alerts<br>
            <strong>Total Items:</strong> ${alerts.length}<br>
            <strong>Critical Items:</strong> ${alerts.filter(a => a.severity === 'High').length}
          </div>
          <div>
            <strong>Date Generated:</strong> ${currentDate}<br>
            <strong>Generated By:</strong> ${user.name}<br>
            <strong>Role:</strong> ${user.role}
          </div>
        </div>

        <table>
          <thead>
            <tr>
              <th>Product</th>
              <th>SKU</th>
              <th>Current Stock</th>
              <th>Min Stock</th>
              <th>Location</th>
              <th>Severity</th>
            </tr>
          </thead>
          <tbody>
            ${alerts.map(alert => `
              <tr>
                <td>${alert.product}</td>
                <td>${alert.sku}</td>
                <td>${alert.currentStock}</td>
                <td>${alert.minStock}</td>
                <td>${alert.location}</td>
                <td class="${alert.severity.toLowerCase()}">${alert.severity}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>

        <div class="footer">
          <div>This is a system generated report from the Inventory Management System</div>
          <div class="print-info">
            <span>Print Date: ${currentDate}</span>
            <span>Printed By: ${user.name}</span>
          </div>
        </div>
      </body>
    </html>
  `

  printWindow.document.write(tableHtml)
  printWindow.document.close()
  printWindow.print()
}

export function exportToPdf(alerts: AlertItem[], options: PrintOptions) {
  const doc = new jsPDF()
  const { companyInfo, user } = options
  const currentDate = new Date().toLocaleString()
  
  // Company Header
  if (companyInfo.logo) {
    doc.addImage(companyInfo.logo, 'JPEG', 14, 10, 30, 30)
    doc.setFontSize(20)
    doc.text(companyInfo.name, 50, 25)
  } else {
    doc.setFontSize(20)
    doc.text(companyInfo.name, 14, 20)
  }
  
  doc.setFontSize(10)
  doc.text(companyInfo.address, 14, companyInfo.logo ? 45 : 30)
  doc.text(`Tel: ${companyInfo.phone} | Email: ${companyInfo.email}`, 14, companyInfo.logo ? 52 : 37)
  
  // Report Info
  const startY = companyInfo.logo ? 65 : 50
  doc.setFontSize(12)
  doc.text('Low Stock Alerts Report', 14, startY)
  
  doc.setFontSize(10)
  doc.text(`Total Items: ${alerts.length}`, 14, startY + 10)
  doc.text(`Critical Items: ${alerts.filter(a => a.severity === 'High').length}`, 14, startY + 17)
  
  doc.text(`Date Generated: ${currentDate}`, 120, startY + 10)
  doc.text(`Generated By: ${user.name}`, 120, startY + 17)
  doc.text(`Role: ${user.role}`, 120, startY + 24)

  // Table
  doc.autoTable({
    head: [["Product", "SKU", "Current Stock", "Min Stock", "Location", "Severity"]],
    body: alerts.map(alert => [
      alert.product,
      alert.sku,
      alert.currentStock.toString(),
      alert.minStock.toString(),
      alert.location,
      alert.severity
    ]),
    startY: startY + 35,
    styles: { fontSize: 9, cellPadding: 3 },
    columnStyles: {
      0: { cellWidth: 40 },
      1: { cellWidth: 25 },
      2: { cellWidth: 25 },
      3: { cellWidth: 25 },
      4: { cellWidth: 35 },
      5: { cellWidth: 25 }
    },
    didDrawCell: (data) => {
      if (data.section === 'body' && data.column.index === 5) {
        const severity = alerts[data.row.index].severity
        if (severity === 'High') {
          doc.setTextColor(220, 38, 38)
        } else if (severity === 'Warning') {
          doc.setTextColor(245, 158, 11)
        }
      }
    },
    didDrawPage: (data) => {
      // Footer
      const pageHeight = doc.internal.pageSize.height
      doc.setFontSize(8)
      doc.setTextColor(100)
      doc.text('This is a system generated report from the Inventory Management System', doc.internal.pageSize.width / 2, pageHeight - 15, { align: 'center' })
      doc.text(`Print Date: ${currentDate} | Printed By: ${user.name}`, doc.internal.pageSize.width / 2, pageHeight - 10, { align: 'center' })
    }
  })

  doc.save('low-stock-alerts.pdf')
}

export function exportToExcel(alerts: AlertItem[], options: PrintOptions) {
  const { companyInfo, user } = options
  const currentDate = new Date().toLocaleString()

  // Create workbook and worksheet
  const workbook = XLSX.utils.book_new()
  
  // Add report info sheet
  const reportInfo = [
    ['Company Information'],
    [companyInfo.name],
    [companyInfo.address],
    [`Tel: ${companyInfo.phone}`, `Email: ${companyInfo.email}`],
    [],
    ['Report Information'],
    ['Report Type:', 'Low Stock Alerts'],
    ['Total Items:', alerts.length],
    ['Critical Items:', alerts.filter(a => a.severity === 'High').length],
    ['Date Generated:', currentDate],
    ['Generated By:', user.name],
    ['Role:', user.role]
  ]
  const infoSheet = XLSX.utils.aoa_to_sheet(reportInfo)
  XLSX.utils.book_append_sheet(workbook, infoSheet, 'Report Info')

  // Add alerts data sheet
  const worksheet = XLSX.utils.json_to_sheet(alerts)
  XLSX.utils.book_append_sheet(workbook, worksheet, 'Alerts')

  // Auto-size columns
  const maxWidths = alerts.reduce((acc, alert) => {
    Object.entries(alert).forEach(([key, value]) => {
      const length = value.toString().length
      acc[key] = Math.max(acc[key] || 0, length)
    })
    return acc
  }, {} as Record<string, number>)

  worksheet['!cols'] = Object.values(maxWidths).map(width => ({ width }))

  XLSX.writeFile(workbook, 'low-stock-alerts.xlsx')
}

export function exportToCsv(alerts: AlertItem[], options: PrintOptions) {
  const { companyInfo, user } = options
  const currentDate = new Date().toLocaleString()

  // Create CSV content with header information
  const headerInfo = [
    `Company: ${companyInfo.name}`,
    `Address: ${companyInfo.address}`,
    `Contact: Tel: ${companyInfo.phone} | Email: ${companyInfo.email}`,
    '',
    'Low Stock Alerts Report',
    `Generated on: ${currentDate}`,
    `Generated by: ${user.name} (${user.role})`,
    `Total Items: ${alerts.length}`,
    `Critical Items: ${alerts.filter(a => a.severity === 'High').length}`,
    '',
    'Product,SKU,Current Stock,Min Stock,Location,Severity'
  ].join('\n')

  const csvData = alerts.map(alert => 
    [
      alert.product,
      alert.sku,
      alert.currentStock,
      alert.minStock,
      alert.location,
      alert.severity
    ].join(',')
  ).join('\n')

  const csvContent = `${headerInfo}\n${csvData}`
  
  // Create blob and download
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
  const link = document.createElement('a')
  const url = URL.createObjectURL(blob)
  link.setAttribute('href', url)
  link.setAttribute('download', 'low-stock-alerts.csv')
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
}

export async function importFromExcel(file: File): Promise<AlertItem[]> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader()
    
    reader.onload = (e) => {
      try {
        const data = new Uint8Array(e.target?.result as ArrayBuffer)
        const workbook = XLSX.read(data, { type: 'array' })
        
        const worksheet = workbook.Sheets[workbook.SheetNames[0]]
        const jsonData = XLSX.utils.sheet_to_json(worksheet) as AlertItem[]
        
        resolve(jsonData)
      } catch (error) {
        reject(new Error('Failed to parse Excel file'))
      }
    }
    
    reader.onerror = () => {
      reject(new Error('Failed to read file'))
    }
    
    reader.readAsArrayBuffer(file)
  })
}
