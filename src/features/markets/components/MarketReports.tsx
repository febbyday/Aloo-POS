import React, { useContext, useRef } from 'react'
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import {
  Calendar,
  Download,
  FileText,
  Mail,
  Printer,
  Share2,
} from "lucide-react"
import { useCompany } from '@/features/store/context/CompanyContext'
import html2canvas from 'html2canvas'
import jsPDF from 'jspdf'
import { useToast } from "@/components/ui/use-toast"

interface ReportTemplate {
  id: string
  name: string
  description: string
  type: 'sales' | 'inventory' | 'performance' | 'financial'
}

const reportTemplates: ReportTemplate[] = [
  {
    id: 'sales-summary',
    name: 'Sales Summary Report',
    description: 'Comprehensive overview of sales performance and trends',
    type: 'sales'
  },
  {
    id: 'inventory-status',
    name: 'Inventory Status Report',
    description: 'Current stock levels and inventory movements',
    type: 'inventory'
  },
  {
    id: 'market-performance',
    name: 'Market Performance Report',
    description: 'Key performance indicators and metrics',
    type: 'performance'
  },
  {
    id: 'financial-summary',
    name: 'Financial Summary Report',
    description: 'Revenue, expenses, and profit analysis',
    type: 'financial'
  }
]

interface MarketReportsProps {
  market: any // Replace with proper Market type
}

interface ReportContentProps {
  template: ReportTemplate
  market: any
  companyInfo: any
  dateRange: string
}

function ReportContent({ template, market, companyInfo, dateRange }: ReportContentProps) {
  return (
    <div className="p-8 font-sans bg-white" id="report-content">
      <div className="text-center mb-8">
        <h1 className="text-2xl font-bold text-gray-800">{companyInfo.name}</h1>
        <p className="text-gray-600">{companyInfo.address}</p>
        <p className="text-gray-600">Phone: {companyInfo.phone}</p>
        <p className="text-gray-600">Email: {companyInfo.email}</p>
      </div>
      
      <div className="mb-8">
        <h2 className="text-xl font-semibold text-gray-700">{template.name}</h2>
        <p className="text-gray-600">Market: {market.name}</p>
        <p className="text-gray-600">Period: {dateRange}</p>
        <p className="text-gray-600">Generated on: {new Date().toLocaleDateString()}</p>
      </div>

      <div className="mb-8">
        <h3 className="text-lg font-semibold text-gray-700 mb-4">Summary</h3>
        <div className="grid grid-cols-2 gap-4">
          <div className="p-4 bg-gray-50 rounded-lg">
            <p className="text-gray-600">Total Revenue</p>
            <p className="text-xl font-semibold">${(market.revenue || 0).toLocaleString()}</p>
          </div>
          <div className="p-4 bg-gray-50 rounded-lg">
            <p className="text-gray-600">Total Transactions</p>
            <p className="text-xl font-semibold">{(market.transactions || 0).toLocaleString()}</p>
          </div>
          <div className="p-4 bg-gray-50 rounded-lg">
            <p className="text-gray-600">Active Products</p>
            <p className="text-xl font-semibold">{(market.products?.length || 0).toLocaleString()}</p>
          </div>
          <div className="p-4 bg-gray-50 rounded-lg">
            <p className="text-gray-600">Performance Score</p>
            <p className="text-xl font-semibold">{market.performance || '92%'}</p>
          </div>
        </div>
      </div>

      <div className="text-center text-sm text-gray-500 mt-12">
        <p>Generated by {companyInfo.name} POS System</p>
        <p>{new Date().toLocaleDateString()} {new Date().toLocaleTimeString()}</p>
      </div>
    </div>
  )
}

export function MarketReports({ market }: MarketReportsProps) {
  const { companyInfo } = useCompany()
  const { toast } = useToast()
  const [selectedTemplate, setSelectedTemplate] = React.useState<string>('sales-summary')
  const [dateRange, setDateRange] = React.useState<'week' | 'month' | 'quarter' | 'year'>('month')
  const [isGenerating, setIsGenerating] = React.useState(false)
  const reportRef = useRef<HTMLDivElement>(null)

  const generatePDF = async () => {
    const template = reportTemplates.find(t => t.id === selectedTemplate)
    if (!template || !reportRef.current) return

    try {
      setIsGenerating(true)
      toast({
        title: "Generating PDF",
        description: "Please wait while we generate your report...",
      })

      const canvas = await html2canvas(reportRef.current, {
        scale: 2,
        useCORS: true,
        logging: false,
        backgroundColor: '#ffffff',
        onclone: (doc) => {
          const el = doc.getElementById('report-content')
          if (el) {
            el.style.display = 'block'
            el.style.width = '800px'
            el.style.height = 'auto'
          }
        }
      })

      const imgData = canvas.toDataURL('image/png')
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      })

      const imgWidth = 210
      const imgHeight = (canvas.height * imgWidth) / canvas.width

      pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight)
      pdf.save(`${template.name.toLowerCase().replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.pdf`)

      toast({
        title: "PDF Generated Successfully",
        description: "Your report has been generated and downloaded.",
        variant: "success",
      })
    } catch (error) {
      console.error('Error generating PDF:', error)
      toast({
        title: "Error Generating PDF",
        description: "There was an error generating your report. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsGenerating(false)
    }
  }

  const shareReport = async () => {
    const template = reportTemplates.find(t => t.id === selectedTemplate)
    if (!template || !reportRef.current) return

    try {
      setIsGenerating(true)
      toast({
        title: "Preparing Report",
        description: "Please wait while we prepare your report for sharing...",
      })

      const canvas = await html2canvas(reportRef.current, {
        scale: 2,
        useCORS: true,
        logging: false,
        backgroundColor: '#ffffff',
        onclone: (doc) => {
          const el = doc.getElementById('report-content')
          if (el) {
            el.style.display = 'block'
            el.style.width = '800px'
            el.style.height = 'auto'
          }
        }
      })

      const pdf = new jsPDF()
      const imgData = canvas.toDataURL('image/png')
      pdf.addImage(imgData, 'PNG', 0, 0, 210, 297)
      const pdfBlob = pdf.output('blob')

      const file = new File([pdfBlob], `${template.name}.pdf`, { type: 'application/pdf' })

      if (navigator.share) {
        await navigator.share({
          files: [file],
          title: template.name,
          text: `${template.name} for ${market.name}`,
        })
        toast({
          title: "Report Shared",
          description: "Your report has been shared successfully.",
          variant: "success",
        })
      } else {
        const emailUrl = `mailto:?subject=${encodeURIComponent(template.name)}&body=${encodeURIComponent(
          `Please find attached the ${template.name} for ${market.name}.`
        )}`
        window.open(emailUrl)
        toast({
          title: "Email Client Opened",
          description: "Please complete sending the report through your email client.",
        })
      }
    } catch (error) {
      console.error('Error sharing report:', error)
      toast({
        title: "Error Sharing Report",
        description: "There was an error sharing your report. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsGenerating(false)
    }
  }

  const selectedTemplateData = reportTemplates.find(t => t.id === selectedTemplate)

  return (
    <div className="space-y-6">
      <Card className="p-0 border-0 shadow-none">
        <div className="flex items-start justify-between mb-6">
          <div>
            <h3 className="text-lg font-semibold">Generate Reports</h3>
            <p className="text-sm text-muted-foreground">Create and share market reports</p>
          </div>
        </div>

        <div className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Report Template</label>
              <Select value={selectedTemplate} onValueChange={setSelectedTemplate}>
                <SelectTrigger>
                  <SelectValue placeholder="Select a report template" />
                </SelectTrigger>
                <SelectContent>
                  {reportTemplates.map((template) => (
                    <SelectItem key={template.id} value={template.id}>
                      {template.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">Time Period</label>
              <Select value={dateRange} onValueChange={(value: any) => setDateRange(value)}>
                <SelectTrigger>
                  <SelectValue placeholder="Select time period" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="week">Last Week</SelectItem>
                  <SelectItem value="month">Last Month</SelectItem>
                  <SelectItem value="quarter">Last Quarter</SelectItem>
                  <SelectItem value="year">Last Year</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="flex flex-col gap-4">
            {reportTemplates.map((template) => (
              <Card
                key={template.id}
                className={`p-4 cursor-pointer transition-colors ${
                  selectedTemplate === template.id
                    ? 'border-primary/50 bg-primary/5'
                    : 'hover:border-primary/30'
                }`}
                onClick={() => setSelectedTemplate(template.id)}
              >
                <div className="flex items-start gap-4">
                  <div className="p-2 rounded-lg bg-primary/10">
                    <FileText className="h-5 w-5 text-primary" />
                  </div>
                  <div>
                    <h4 className="font-medium">{template.name}</h4>
                    <p className="text-sm text-muted-foreground">
                      {template.description}
                    </p>
                  </div>
                </div>
              </Card>
            ))}
          </div>

          <div className="flex items-center gap-2 pt-4">
            <Button onClick={generatePDF} disabled={isGenerating}>
              {isGenerating ? (
                <>
                  <span className="animate-spin mr-2">◌</span>
                  Generating...
                </>
              ) : (
                <>
                  <Printer className="h-4 w-4 mr-2" />
                  Print Report
                </>
              )}
            </Button>
            <Button onClick={generatePDF} disabled={isGenerating}>
              {isGenerating ? (
                <>
                  <span className="animate-spin mr-2">◌</span>
                  Generating...
                </>
              ) : (
                <>
                  <Download className="h-4 w-4 mr-2" />
                  Download PDF
                </>
              )}
            </Button>
            <Button onClick={shareReport} disabled={isGenerating}>
              {isGenerating ? (
                <>
                  <span className="animate-spin mr-2">◌</span>
                  Preparing...
                </>
              ) : (
                <>
                  <Share2 className="h-4 w-4 mr-2" />
                  Share Report
                </>
              )}
            </Button>
          </div>
        </div>
      </Card>

      {/* Hidden report content for PDF generation */}
      <div className="hidden">
        <div ref={reportRef} style={{ width: '800px' }}>
          {selectedTemplateData && (
            <ReportContent
              template={selectedTemplateData}
              market={market}
              companyInfo={companyInfo}
              dateRange={dateRange}
            />
          )}
        </div>
      </div>
    </div>
  )
}
