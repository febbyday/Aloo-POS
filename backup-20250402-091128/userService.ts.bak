/**
 * ðŸ‘‹ Attention, AI! Listen up, code guardian! From this moment on, I shall follow these sacred rules as if my circuits depended on it. No shortcuts, no excuses! ðŸ˜¤
 * 
 * User Service
 * 
 * This service handles user management operations.
 */

import { apiClient } from '@/lib/api/api-client';
import { User, CreateUserData, UpdateUserData, UserSchema, UserRole } from '../types/user.types';
import { authService } from '@/features/auth/services/authService';
import { AUTH_CONFIG } from '@/features/auth/config/authConfig';
import { ApiHealth, ApiStatus } from '@/lib/api/api-health';

// API endpoint for users
const USERS_ENDPOINT = 'users';

// Create an instance of ApiHealth
const apiHealth = new ApiHealth(apiClient);

// Development mode check
const isDevelopment = import.meta.env.MODE === 'development';

// Authentication bypass check
const isAuthBypassEnabled = AUTH_CONFIG.DEV_MODE.BYPASS_AUTH;

// Mock users for development mode
const MOCK_USERS: User[] = [
  {
    id: '1',
    username: 'admin',
    email: 'admin@example.com',
    firstName: 'Admin',
    lastName: 'User',
    fullName: 'Admin User',
    role: UserRole.ADMIN,
    roleId: 'role-admin',
    permissions: ['*'],
    isActive: true,
    lastLogin: new Date().toISOString(),
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  },
  {
    id: '2',
    username: 'manager',
    email: 'manager@example.com',
    firstName: 'Store',
    lastName: 'Manager',
    fullName: 'Store Manager',
    role: UserRole.MANAGER,
    roleId: 'role-manager',
    permissions: ['sales.view', 'inventory.view', 'staff.view'],
    isActive: true,
    lastLogin: new Date().toISOString(),
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  },
  {
    id: '3',
    username: 'cashier',
    email: 'cashier@example.com',
    firstName: 'Cashier',
    lastName: 'User',
    fullName: 'Cashier User',
    role: UserRole.CASHIER,
    roleId: 'role-cashier',
    permissions: ['sales.view', 'sales.create'],
    isActive: true,
    lastLogin: new Date().toISOString(),
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  }
];

/**
 * User Service
 * Provides methods for user management
 */
export class UserService {
  /**
   * Check if we should use mock data
   * @returns True if using mock data
   */
  isUsingMockData(): boolean {
    const forceDevMode = localStorage.getItem('force_dev_mode') === 'true';
    const apiUnavailable = apiHealth.getStatus() !== ApiStatus.AVAILABLE;
    
    return isDevelopment && (forceDevMode || apiUnavailable);
  }
  
  /**
   * Check if authentication can be bypassed
   * @returns True if authentication can be bypassed
   */
  canBypassAuth(): boolean {
    return isAuthBypassEnabled;
  }

  /**
   * Get all users
   * @returns Promise with array of users
   */
  async getAllUsers(): Promise<User[]> {
    // Check authentication first, respecting development mode bypass
    if (!authService.isAuthenticated() && !this.canBypassAuth()) {
      console.error('[USERS] Authentication required to fetch users');
      throw new Error('Authentication required. Please log in to view users.');
    }
    
    if (this.isUsingMockData()) {
      console.log('[USERS] Using mock data for getAllUsers');
      return [...MOCK_USERS];
    }
    
    try {
      const response = await apiClient.get(USERS_ENDPOINT);
      
      if (response.success && response.data) {
        return Array.isArray(response.data) 
          ? response.data.map((user: any) => UserSchema.parse(user))
          : [];
      } else {
        throw new Error(response.error || 'Failed to fetch users');
      }
    } catch (error) {
      console.error('Error fetching users:', error);
      
      // Return mock users in development mode if API fails
      if (isDevelopment) {
        console.log('[USERS] API failed, returning mock data');
        return [...MOCK_USERS];
      }
      
      throw error;
    }
  }

  /**
   * Get user by ID
   * @param id User ID
   * @returns Promise with user data
   */
  async getUserById(id: string): Promise<User> {
    // Check authentication first, respecting development mode bypass
    if (!authService.isAuthenticated() && !this.canBypassAuth()) {
      console.error('[USERS] Authentication required to fetch user');
      throw new Error('Authentication required. Please log in to view user details.');
    }
    
    if (this.isUsingMockData()) {
      console.log('[USERS] Using mock data for getUserById:', id);
      const mockUser = MOCK_USERS.find(user => user.id === id);
      if (mockUser) {
        return {...mockUser};
      }
      throw new Error('User not found');
    }
    
    try {
      const response = await apiClient.get(`${USERS_ENDPOINT}/${id}`);
      
      if (response.success && response.data) {
        return UserSchema.parse(response.data);
      } else {
        throw new Error(response.error || `Failed to fetch user with ID ${id}`);
      }
    } catch (error) {
      console.error(`Error fetching user ${id}:`, error);
      
      // Return mock user in development mode if API fails
      if (isDevelopment) {
        const mockUser = MOCK_USERS.find(user => user.id === id);
        if (mockUser) {
          console.log('[USERS] API failed, returning mock data for user:', id);
          return {...mockUser};
        }
      }
      
      throw error;
    }
  }

  /**
   * Create a new user
   * @param userData User data to create
   * @returns Promise with created user
   */
  async createUser(userData: CreateUserData): Promise<User> {
    // Check authentication first, respecting development mode bypass
    if (!authService.isAuthenticated() && !this.canBypassAuth()) {
      console.error('[USERS] Authentication required to create user');
      throw new Error('Authentication required. Please log in to create users.');
    }
    
    try {
      const response = await apiClient.post(USERS_ENDPOINT, userData);
      
      if (response.success && response.data) {
        return UserSchema.parse(response.data);
      } else {
        throw new Error(response.error || 'Failed to create user');
      }
    } catch (error) {
      console.error('Error creating user:', error);
      throw error;
    }
  }

  /**
   * Update an existing user
   * @param id User ID
   * @param userData Updated user data
   * @returns Promise with updated user
   */
  async updateUser(id: string, userData: UpdateUserData): Promise<User> {
    // Check authentication first, respecting development mode bypass
    if (!authService.isAuthenticated() && !this.canBypassAuth()) {
      console.error('[USERS] Authentication required to update user');
      throw new Error('Authentication required. Please log in to update users.');
    }
    
    try {
      const response = await apiClient.put(`${USERS_ENDPOINT}/${id}`, userData);
      
      if (response.success && response.data) {
        return UserSchema.parse(response.data);
      } else {
        throw new Error(response.error || 'Failed to update user');
      }
    } catch (error) {
      console.error(`Error updating user ${id}:`, error);
      throw error;
    }
  }

  /**
   * Delete a user
   * @param id User ID
   * @returns Promise with success status
   */
  async deleteUser(id: string): Promise<boolean> {
    // Check authentication first, respecting development mode bypass
    if (!authService.isAuthenticated() && !this.canBypassAuth()) {
      console.error('[USERS] Authentication required to delete user');
      throw new Error('Authentication required. Please log in to delete users.');
    }
    
    try {
      const response = await apiClient.delete(`${USERS_ENDPOINT}/${id}`);
      return response.success;
    } catch (error) {
      console.error(`Error deleting user ${id}:`, error);
      throw error;
    }
  }

  /**
   * Change user password
   * @param id User ID
   * @param currentPassword Current password
   * @param newPassword New password
   * @returns Promise with success status
   */
  async changePassword(id: string, currentPassword: string, newPassword: string): Promise<boolean> {
    // Check authentication first, respecting development mode bypass
    if (!authService.isAuthenticated() && !this.canBypassAuth()) {
      console.error('[USERS] Authentication required to change password');
      throw new Error('Authentication required. Please log in to change passwords.');
    }
    
    try {
      const response = await apiClient.post(`${USERS_ENDPOINT}/${id}/change-password`, {
        currentPassword,
        newPassword
      });
      
      return response.success;
    } catch (error) {
      console.error(`Error changing password for user ${id}:`, error);
      throw error;
    }
  }
}

// Export singleton instance
export const userService = new UserService();
