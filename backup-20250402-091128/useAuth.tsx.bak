/**
 * useAuth Hook
 *
 * This hook provides state management and operations for auth.
 */

import { useContext, useEffect } from 'react';
import { AuthContext } from '../context/AuthContext';
import { useNavigate, useLocation } from 'react-router-dom';

export function useAuth() {
  const context = useContext(AuthContext);
  const navigate = useNavigate();
  const location = useLocation();

  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }

  // Persist auth state in sessionStorage to prevent loss on page refresh
  useEffect(() => {
    const persistedAuth = sessionStorage.getItem('auth_state');
    if (persistedAuth && !context.isAuthenticated && !context.isLoading) {
      try {
        const authData = JSON.parse(persistedAuth);
        // Make sure we have all the required properties
        if (authData && typeof authData.isAuthenticated === 'boolean') {
          console.log('[AUTH] Restoring auth state from session storage');
          context.restoreAuth(authData);

          // Also refresh auth in the background to ensure it's still valid
          setTimeout(() => {
            context.refreshAuth().catch(error => {
              console.error('[AUTH] Error refreshing auth:', error);
            });
          }, 100);
        }
      } catch (error) {
        console.error('Failed to parse auth state from session storage:', error);
        sessionStorage.removeItem('auth_state');
      }
    }
  }, [context.isAuthenticated, context.isLoading, context]);

  // Update persisted state when auth changes
  useEffect(() => {
    if (context.isAuthenticated) {
      sessionStorage.setItem('auth_state', JSON.stringify({
        isAuthenticated: true,
        user: context.user,
        permissions: context.permissions
      }));
    } else {
      sessionStorage.removeItem('auth_state');
    }
  }, [context.isAuthenticated, context.user, context.permissions]);

  return context;
}
